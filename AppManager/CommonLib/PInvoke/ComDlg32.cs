using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.InteropServices;


namespace CommonLib.PInvoke
{
	/// <summary>
	/// Defines the shape of hook procedures that can be called by the OpenFileDialog
	/// </summary>
	public delegate IntPtr OfnHookProc(IntPtr hWnd, UInt16 msg, Int32 wParam, Int32 lParam);

	/// <summary>
	/// Values that can be placed in the OPENFILENAME structure, we don't use all of them
	/// </summary>
	public class OpenFileNameFlags
	{
		public const Int32 ReadOnly = 0x00000001;
		public const Int32 OverWritePrompt = 0x00000002;
		public const Int32 HideReadOnly = 0x00000004;
		public const Int32 NoChangeDir = 0x00000008;
		public const Int32 ShowHelp = 0x00000010;
		public const Int32 EnableHook = 0x00000020;
		public const Int32 EnableTemplate = 0x00000040;
		public const Int32 EnableTemplateHandle = 0x00000080;
		public const Int32 NoValidate = 0x00000100;
		public const Int32 AllowMultiSelect = 0x00000200;
		public const Int32 ExtensionDifferent = 0x00000400;
		public const Int32 PathMustExist = 0x00000800;
		public const Int32 FileMustExist = 0x00001000;
		public const Int32 CreatePrompt = 0x00002000;
		public const Int32 ShareAware = 0x00004000;
		public const Int32 NoReadOnlyReturn = 0x00008000;
		public const Int32 NoTestFileCreate = 0x00010000;
		public const Int32 NoNetworkButton = 0x00020000;
		public const Int32 NoLongNames = 0x00040000;
		public const Int32 Explorer = 0x00080000;
		public const Int32 NoDereferenceLinks = 0x00100000;
		public const Int32 LongNames = 0x00200000;
		public const Int32 EnableIncludeNotify = 0x00400000;
		public const Int32 EnableSizing = 0x00800000;
		public const Int32 DontAddToRecent = 0x02000000;
		public const Int32 ForceShowHidden = 0x10000000;
	};

	/// <summary>
	/// Values that can be placed in the FlagsEx field of the OPENFILENAME structure
	/// </summary>
	public class OpenFileNameFlagsEx
	{
		public const Int32 NoPlacesBar = 0x00000001;
	};

	/// <summary>
	/// The possible notification messages that can be generated by the OpenFileDialog
	/// We only look for CDN_SELCHANGE
	/// </summary>
	public enum CommonDlgNotification : ushort
	{
		CDN_FIRST   = unchecked((UInt16)((UInt16)0 - (UInt16)601)),
		CDN_LAST    = unchecked((UInt16)((UInt16)0 - (UInt16)699)),

		CDN_INITDONE = (CDN_FIRST - 0X0000),
		CDN_SELCHANGE = (CDN_FIRST - 0X0001),
		CDN_FOLDERCHANGE = (CDN_FIRST - 0X0002),
		CDN_SHAREVIOLATION = (CDN_FIRST - 0X0003),
		CDN_HELP = (CDN_FIRST - 0X0004),
		CDN_FILEOK = (CDN_FIRST - 0X0005),
		CDN_TYPECHANGE = (CDN_FIRST - 0X0006),
		CDN_INCLUDEITEM = (CDN_FIRST - 0X0007)
	}

	/// <summary>
	/// Messages that can be send to the common dialogs
	/// We only use CDM_GETFILEPATH
	/// </summary>
	public enum DialogChangeProperties
	{
		CDM_FIRST = (WindowMessage.WM_USER + 100),
		CDM_GETSPEC = (CDM_FIRST + 0x0000),
		CDM_GETFILEPATH = (CDM_FIRST + 0x0001),
		CDM_GETFOLDERPATH = (CDM_FIRST + 0x0002),
		CDM_GETFOLDERIDLIST = (CDM_FIRST + 0x0003),
		CDM_SETCONTROLTEXT = (CDM_FIRST + 0x0004),
		CDM_HIDECONTROL = (CDM_FIRST + 0x0005),
		CDM_SETDEFEXT = (CDM_FIRST + 0x0006)
	}

	/// <summary>
	/// See the documentation for OPENFILENAME
	/// </summary>
	[StructLayout(LayoutKind.Sequential)]
	public struct OpenFileName
	{
		public Int32 lStructSize;
		public IntPtr hwndOwner;
		public IntPtr hInstance;
		public IntPtr lpstrFilter;
		public IntPtr lpstrCustomFilter;
		public Int32 nMaxCustFilter;
		public Int32 nFilterIndex;
		public IntPtr lpstrFile;
		public Int32 nMaxFile;
		public IntPtr lpstrFileTitle;
		public Int32 nMaxFileTitle;
		public IntPtr lpstrInitialDir;
		public IntPtr lpstrTitle;
		public Int32 Flags;
		public Int16 nFileOffset;
		public Int16 nFileExtension;
		public IntPtr lpstrDefExt;
		public Int32 lCustData;
		public OfnHookProc lpfnHook;
		public IntPtr lpTemplateName;
		public IntPtr pvReserved;
		public Int32 dwReserved;
		public Int32 FlagsEx;
	};

	/// <summary>
	/// Part of the notification messages sent by the common dialogs
	/// </summary>
	[StructLayout(LayoutKind.Explicit)]
	public struct NMHDR
	{
		[FieldOffset(0)]
		public IntPtr hWndFrom;
		[FieldOffset(4)]
		public UInt16 idFrom;
		[FieldOffset(8)]
		public UInt16 code;
	};

	/// <summary>
	/// Part of the notification messages sent by the common dialogs
	/// </summary>
	[StructLayout(LayoutKind.Explicit)]
	public struct OFNOTIFY
	{
		[FieldOffset(0)]
		public NMHDR hdr;
		[FieldOffset(12)]
		public IntPtr ipOfn;
		[FieldOffset(16)]
		public IntPtr ipFile;
	};

	/// <summary>
	/// Win32 window style constants
	/// We use them to set up our child window
	/// </summary>
	public class DlgStyle
	{
		public const Int32 DsSetFont = 0x00000040;
		public const Int32 Ds3dLook = 0x00000004;
		public const Int32 DsControl = 0x00000400;
		public const Int32 WsChild = 0x40000000;
		public const Int32 WsClipSiblings = 0x04000000;
		public const Int32 WsVisible = 0x10000000;
		public const Int32 WsGroup = 0x00020000;
		public const Int32 SsNotify = 0x00000100;
	};

	/// <summary>
	/// Win32 "extended" window style constants
	/// </summary>
	public class ExStyle
	{
		public const Int32 WsExNoParentNotify = 0x00000004;
		public const Int32 WsExControlParent = 0x00010000;
	};

	/// <summary>
	/// An in-memory Win32 dialog template
	/// Note: this has a very specific structure with a single static "label" control
	/// See documentation for DLGTEMPLATE and DLGITEMTEMPLATE
	/// </summary>
	//[StructLayout(LayoutKind.Sequential)]
	//public class DLGTEMPLATE
	//{
	//    // The dialog template - see documentation for DLGTEMPLATE
	//    public Int32 style = DlgStyle.Ds3dLook | DlgStyle.DsControl | DlgStyle.WsChild | DlgStyle.WsClipSiblings | DlgStyle.SsNotify;
	//    public Int32 extendedStyle = ExStyle.WsExControlParent;
	//    public Int16 numItems = 1;
	//    public Int16 x = 0;
	//    public Int16 y = 0;
	//    public Int16 cx = 0;
	//    public Int16 cy = 0;
	//    public Int16 reservedMenu = 0;
	//    public Int16 reservedClass = 0;
	//    public Int16 reservedTitle = 0;

	//    // Single dlg item, must be dword-aligned - see documentation for DLGITEMTEMPLATE
	//    public Int32 itemStyle = DlgStyle.WsChild;
	//    public Int32 itemExtendedStyle = ExStyle.WsExNoParentNotify;
	//    public Int16 itemX = 0;
	//    public Int16 itemY = 0;
	//    public Int16 itemCx = 0;
	//    public Int16 itemCy = 0;
	//    public Int16 itemId = 0;
	//    public UInt16 itemClassHdr = 0xffff;	// we supply a constant to indicate the class of this control
	//    public Int16 itemClass = 0x0082;	// static label control
	//    public Int16 itemText = 0x0000;	// no text for this control
	//    public Int16 itemData = 0x0000;	// no creation data for this control
	//};

	public class ComDlg32
	{
		[DllImport("ComDlg32.dll", CharSet = CharSet.Unicode)]
		internal static extern bool GetOpenFileName(IntPtr ptrOfn);

		[DllImport("ComDlg32.dll", CharSet = CharSet.Unicode)]
		internal static extern Int32 CommDlgExtendedError();
	}
}
